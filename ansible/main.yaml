---
- name: Create ansible user and give it sudo access
  hosts: all
  remote_user: root
  tags:
    - setup
    - ansible

  vars:
    ansible_username: ansible
    ansible_ssh_keys:
      - https://github.com/kisamoto.keys

  tasks:
    - name: Create ansible user
      ansible.builtin.user:
        name: "{{ ansible_username }}"
        shell: /bin/bash
        system: yes

    - name: Give ansible user sudo access
      community.general.sudoers:
        name: "{{ ansible_username }}-sudo"
        user: "{{ ansible_username }}"
        state: present
        commands: ALL
        validation: required

    - name: Install public SSH keys for GitHub user kisamoto for ansible user
      ansible.builtin.authorized_key:
        user: "{{ ansible_username }}"
        state: present
        key: "{{ item }}"
      with_items: "{{ ansible_ssh_keys }}"

- name: Harden SSH configuration
  hosts: all
  user: ansible
  become: yes
  tags:
    - setup
    - ssh
    - hardening

  roles:
    # This will disable the root user and password authentication
    - devsec.hardening.ssh_hardening

- name: Prepare and harden box
  hosts: all
  remote_user: ansible
  become: yes
  tags:
    - os
    - setup
    - hardening

  pre_tasks:
    - name: Update the packages cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

  roles:
    - name: devsec.hardening.os_hardening

  vars:
    os_auditd_admin_space_left_action: rotate
    os_auditd_disk_full_action: rotate
    os_auditd_max_log_file_action: rotate
    os_ignore_users: ["ansible"]

  tasks:
    - name: Upgrade all installed packages
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: yes
        autoremove: yes

    - name: Enable automatic security updates
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present

    - name: Configure automatic updates
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";

- name: Deploy Agora Application
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - app
  vars:
    # app information
    app_name: agora
    app_user: agora
    app_group: www-data
    # where the app is on the server
    app_dir: /opt/{{ app_name }}
    # where the app code is
    # todo(kisamoto): Create and encrypt the token
    github_token: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      65333537316530616539343835343034613533316463623238633730373333336561353538616266
      6139653362306330653432646464633333393765343631320a346361656466646561646435376566
      34383833353033613133633464303031613133656630623030616663653333386235363532633461
      6266633738393163370a663866366637373139323263366135623936633664663033396432333362
      33653561633766343539326539336236643834336664636233626135353539656666346137663163
      62626261353339646630386463376363616531373139373035636263653162343861623562623135
      38363135613637353335303464613136316638646666326238633631356132636535386538326262
      62646662653635373136363633343666326665643361363966343266323934376633356639353031
      3239
    app_repo_url: https://{{ github_token }}@github.com/agora-net/agora.net.git

  tasks:
    - name: Create app groups
      ansible.builtin.group:
        name: "{{ item }}"
        system: yes
        state: present
      with_items:
        - "{{ app_user }}"
        - "{{ app_group }}"

    - name: Create app user
      ansible.builtin.user:
        name: "{{ app_user }}"
        create_home: no
        system: yes
        state: present
        group: "{{ app_user }}"
        groups: "{{ app_group }}"
        password_lock: yes

    - name: Install system dependencies
      ansible.builtin.package:
        name:
          - git
          - python3
          - python3-pip
          - just
        state: present

    - name: Install pipenv
      ansible.builtin.pip:
        name: pipenv
        state: present
        extra_args: --user
        break_system_packages: yes

    - name: Create application directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0755"

    - name: Pull application code
      ansible.builtin.git:
        repo: "{{ app_repo_url }}"
        dest: "{{ app_dir }}"
      become_user: "{{ app_user }}"
      notify: reload app

    - name: Install all dependencies
      ansible.builtin.command:
        cmd: just install
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}"

    - name: Build frontend assets
      ansible.builtin.command:
        cmd: just build-static
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}"

    - name: Collect static files
      ansible.builtin.command:
        cmd: just collectstatic
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}"

    - name: Install app systemd services
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "0644"
        validate: systemd_analyze verify %s
      with_items:
        - src: templates/app.service.j2
          dest: /etc/systemd/system/{{ app_name }}.service
        - src: templates/app.socket.j2
          dest: /etc/systemd/system/{{ app_name }}.socket

    - name: Enable and start services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - "{{ app_name }}"

    - name: Run database migrations
      ansible.builtin.command:
        cmd: just migrate
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}"
      notify: reload app

  handlers:
    - name: reload app
      ansible.builtin.systemd_service:
        name: "{{ app_name }}"
        state: reloaded
        daemon_reload: yes

- name: Setup Caddy webserver for application
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - web

  vars:
    # app information
    app_name: agora
    # where the app is on the internet
    app_domain: agora.gdn
    media_domain: agora-media.gdn

  tasks:
    - name: Install Caddy
      ansible.builtin.package:
        name: caddy
        state: present

    - name: Create Caddy configuration directory
      ansible.builtin.file:
        path: /etc/caddy
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Install Caddyfile
      ansible.builtin.template:
        src: templates/caddy/Caddyfile.j2
        dest: /etc/caddy/Caddyfile
        mode: "0644"
        validate: caddy validate --config %s
      notify: reload caddy

    - name: Enable and start services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - caddy

  handlers:
    - name: reload caddy
      ansible.builtin.systemd_service:
        name: caddy
        state: reloaded

- name: Add Backups for application
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - backup

  vars:
    # app information
    app_name: agora
    # TODO(kisamoto): Add the Borg repo
    borg_repo:
    borg_passphrase: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      65333461306537383863336563666339313435313164356538313564343136616264646537323464
      3234623934663636663431323231663063353439353633660a336534363666656162316466633833
      32373537653466643731303866346564616138656136633133323430353337663164343465636664
      6165383364633539320a343135393039626532323465666332646165613664363764346238393366
      37666138373136346536356666643834363565323131626666303632636634383330626166356661
      6165343235633961663635613766333861653333396134343231

  tasks:
    - name: Install Borg and Borgmatic
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - borgbackup
        - borgmatic

    - name: Create Borgmatic configuration directory
      ansible.builtin.file:
        path: /etc/borgmatic
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Create Borgmatic configuration file
      ansible.builtin.template:
        src: templates/borgmatic/config.yaml.j2
        dest: /etc/borgmatic/config.yaml
        owner: root
        group: root
        mode: "0644"
        validate: borgmatic config validate --config %s

    - name: Create Borgmatic systemd services
      ansible.builtin.template:
        src: templates/borgmatic/{{ item }}.j2
        dest: /etc/systemd/system/{{ item }}
        owner: root
        group: root
        mode: "0644"
        validate: systemd_analyze verify %s
      with_items:
        - borgmatic.timer
        - borgmatic.service

    - name: Initialize remote Borg repository
      ansible.builtin.command: borg init --encryption=repokey-blake2 {{ borg_repo }}

    - name: Enable and start Borgmatic services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - borgmatic.timer
        - borgmatic.service

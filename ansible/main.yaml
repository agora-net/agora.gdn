---
- name: Create ansible user and give it sudo access
  hosts: all
  remote_user: root
  become: yes
  tags:
    - setup
    - ansible

  vars:
    ansible_username: ansible
    ansible_ssh_keys:
      - https://github.com/kisamoto.keys

  tasks:
    - name: Create ansible user
      ansible.builtin.user:
        name: "{{ ansible_username }}"
        shell: /bin/bash
        system: yes

    - name: Give ansible user no password sudo access for all users
      community.general.sudoers:
        name: "{{ ansible_username }}-sudo"
        user: "{{ ansible_username }}"
        state: present
        commands: ALL
        nopassword: yes
        validation: required
        runas: ALL

    - name: Install public SSH keys for GitHub user kisamoto for ansible user
      ansible.builtin.authorized_key:
        user: "{{ ansible_username }}"
        state: present
        key: "{{ item }}"
      with_items: "{{ ansible_ssh_keys }}"

- name: Harden SSH configuration
  hosts: all
  user: ansible
  become: yes
  tags:
    - setup
    - ssh
    - hardening

  roles:
    # This will disable the root user and password authentication
    - devsec.hardening.ssh_hardening

- name: Prepare and harden box
  hosts: all
  remote_user: ansible
  become: yes
  tags:
    - os
    - setup
    - hardening

  pre_tasks:
    - name: Update the packages cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

  roles:
    - geerlingguy.swap
    - devsec.hardening.os_hardening

  vars:
    os_auditd_admin_space_left_action: rotate
    os_auditd_disk_full_action: rotate
    os_auditd_max_log_file_action: rotate
    os_ignore_users: ["ansible"]
    # Create a swap space to prevent the server from running out of memory
    swap_file_size_mb: "4096"

  tasks:
    - name: Upgrade all installed packages
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: yes
        autoremove: yes

    - name: Enable automatic security updates
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present

    - name: Configure automatic updates
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";

- name: Install dokku
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - dokku
    - setup
  vars:
    # Dokku setup
    dokku_packages_state: latest
    dokku_vhost_enable: false # don't use vhost (*.example.com) domain
    dokku_users:
      - name: "ewan"
        username: "ewan"
        ssh_key: "{{lookup('file', '~/.ssh/id_ed25519.pub')}}"
    dokku_plugins:
      - name: maintenance
        url: https://github.com/dokku/dokku-maintenance.git
      - name: letsencrypt
        url: https://github.com/dokku/dokku-letsencrypt.git

  roles:
    - dokku_bot.ansible_dokku

- name: Deploy Agora Application
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - app
    - deploy
  vars:
    # app information
    app_name: agora
    app_user: agora
    app_group: www-data
    app_domains:
      - agora.gdn
      - www.agora.gdn
      # todo(kisamoto): add agorausermedia.com dns entries
      # - agorausermedia.com # Used for user uploaded media
    app_static_host: https://cdn.agora.gdn/
    # where the app is on the server
    app_dir: /opt/{{ app_name }}
    # additional app configuration
    app_django_secret_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      30316332666532343838333837643936333432623763333531303834303161306437656134343335
      6138623233613462353563636131313235303330633337360a323932373838616264656462303161
      62316537653335643532653263346638363165396263313531303464626366666165303331316561
      3034313737393863640a303535386466623735356164646532373638626261613263386231316239
      34663434373462376432656230333465623566373030646265363561633165636166373032346463
      37323365316536396337616237326631343365656262633633363261303762653761356163316165
      64316666383262363232643131646562353132623936313539376130613864323638366137313137
      62373366366236336362
    # where the app code is
    github_token: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      34323039636330663565613138363163633438616637366165366232353363316138366463306363
      6165623631383739613663623637386162306233333433350a353032396433396266363464616635
      63663139633930643764636137313366646436383231633839363662626564316231653238336637
      3132386163393437640a353739353634626261393338343039383334303435666632383137373631
      34323965366564373439303330636462343834316166666437373838656130373138343636393630
      37303937643632646266633633633739653632643131363235323036356164323438386137363439
      61636262646532303363656537616231373736343562383961383630643462663565323736613139
      38366565306632353130306663663433623661623837623339366436646631616166326432363936
      3837
    app_repo_url: https://{{ github_token }}@github.com/agora-net/agora.net.git
    app_repo_version: main
    app_build_from_source: false
    app_image_registry: docker.io
    app_image: "{{ app_image_registry}}/kisamoto/tmp.agora.net"
    app_image_registry_username: kisamoto
    # docker.io access token
    app_image_registry_password: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      61656439303330623434393332363734333361383063613234363436313865383865393438646465
      6661333533643938333936643364656437636431393238630a326461646565633633333635363866
      62356666643739326531666165646362393666346130323233353835323266353734633364306434
      3039633765663439660a386239613734353239666134666432663935306462623862343933323662
      37346337663534313332656538653265383233303138393230303237626263393134343733663236
      3761353066623633373838333634343336386637303566396631
    app_image_tag: latest
    app_use_docker_image: true
    # management information
    lets_encrypt_email: ewan@agora.gdn
    app_cloudflare_api_token: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      38346139306238623238373536313333363439336236316634343134306265656663303735363363
      6135666164653836323935653731386431323164653131310a636563613762373463663264333431
      37613136653532663137623038613534333063343962323464643839623039643234633362306138
      3235376165643237380a396336313137653261376239623562343863613338663934636331386663
      63303661623530393032393737613638393930656135636166653639346565346234303534346662
      6562366462366666623338343063336461633666333762643833

  tasks:
    - name: Create a docker volume for the SQLite database
      community.docker.docker_volume:
        volume_name: "{{ app_name }}_db"
    - name: create app
      dokku_app:
        # change this name in your template!
        app: "{{ app_name }}"
    - name: Mount docker volume for SQLite database into dokku app
      dokku_storage:
        app: "{{ app_name }}"
        mounts:
          - "{{ app_name }}_db:/app/db"
    - name: Set app configuration
      dokku_config:
        app: "{{ app_name }}"
        config:
          DEBUG: "False"
          SECRET_KEY: "{{ app_django_secret_key }}"
          ALLOWED_HOSTS: "{{ app_domains | join(',') }}"
          STATIC_HOST: "{{ app_static_host }}"
          LOG_LEVEL: "WARNING"
          DB_DEFAULT_URL: "sqlite:////app/db/db.sqlite3"
          PORT: "5000" # dokku forwards to 5000 by default
      no_log: yes
    - name: pull and build app from source code
      when: "app_build_from_source"
      dokku_clone:
        app: "{{ app_name }}"
        repository: "{{ app_repo_url }}"
        version: "{{ app_repo_version }}"
        build: "{{ app_build_from_source }}"
    - name: setup app with docker image
      when: app_use_docker_image
      block:
        - name: authenticate with docker registry
          dokku_registry:
            app: "{{ app_name }}"
            image: "{{ app_image }}"
            username: "{{ app_image_registry_username }}"
            password: "{{ app_image_registry_password }}"
            server: "{{ app_image_registry }}"
          no_log: yes
        - name: pull docker image for app
          dokku_image:
            app: "{{ app_name }}"
            image: "{{ app_image }}:{{ app_image_tag }}"
          notify: restart app
    - name: add domain
      dokku_domains:
        app: "{{ app_name }}"
        domains: "{{ app_domains }}"
    - name: set config for letsencrypt dns provider
      ansible.builtin.command:
        cmd: dokku letsencrypt:set {{ app_name }} {{ item.property }} {{ item.value }}
      with_items:
        - property: dns-provider
          value: cloudflare
        - property: dns-provider-CF_DNS_API_TOKEN
          value: "{{ app_cloudflare_api_token }}"
        - property: email
          value: "{{ lets_encrypt_email }}"
      no_log: yes
    - name: enable letsencrypt for app
      dokku_letsencrypt:
        app: "{{ app_name }}"
    - name: Enable the default proxy
      dokku_proxy:
        app: "{{ app_name }}"
    # run in a separate container but a shared volume so should be persisted
    - name: run migrations
      ansible.builtin.command:
        cmd: dokku run {{ app_name }} just migrate
      notify:
        - restart app

  handlers:
    - name: restart app
      ansible.builtin.command:
        cmd: dokku ps:restart --quiet {{ app_name }}

- name: Add Backups for application
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - backup

  vars:
    # app information
    app_name: agora
    # TODO(kisamoto): Add the Borg repo
    borg_repo:
    borg_passphrase: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      65333461306537383863336563666339313435313164356538313564343136616264646537323464
      3234623934663636663431323231663063353439353633660a336534363666656162316466633833
      32373537653466643731303866346564616138656136633133323430353337663164343465636664
      6165383364633539320a343135393039626532323465666332646165613664363764346238393366
      37666138373136346536356666643834363565323131626666303632636634383330626166356661
      6165343235633961663635613766333861653333396134343231

  tasks:
    - name: Install Borg and Borgmatic
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - borgbackup
        - borgmatic

    - name: Create Borgmatic configuration directory
      ansible.builtin.file:
        path: /etc/borgmatic
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Create Borgmatic configuration file
      ansible.builtin.template:
        src: templates/borgmatic/config.yaml.j2
        dest: /etc/borgmatic/config.yaml
        owner: root
        group: root
        mode: "0644"
        validate: borgmatic config validate --config %s

    - name: Create Borgmatic systemd services
      ansible.builtin.template:
        src: templates/borgmatic/{{ item }}.j2
        dest: /etc/systemd/system/{{ item }}
        owner: root
        group: root
        mode: "0644"
        validate: systemd_analyze verify %s
      with_items:
        - borgmatic.timer
        - borgmatic.service

    - name: Initialize remote Borg repository
      ansible.builtin.command: borg init --encryption=repokey-blake2 {{ borg_repo }}

    - name: Enable and start Borgmatic services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - borgmatic.timer
        - borgmatic.service

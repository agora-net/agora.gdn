---
- name: Create ansible user and give it sudo access
  hosts: all
  remote_user: root
  become: yes
  tags:
    - setup
    - ansible

  vars:
    ansible_username: ansible
    ansible_ssh_keys:
      - https://github.com/kisamoto.keys

  tasks:
    - name: Create ansible user
      ansible.builtin.user:
        name: "{{ ansible_username }}"
        shell: /bin/bash
        system: yes

    - name: Give ansible user no password sudo access for all users
      community.general.sudoers:
        name: "{{ ansible_username }}-sudo"
        user: "{{ ansible_username }}"
        state: present
        commands: ALL
        nopassword: yes
        validation: required
        runas: ALL

    - name: Install public SSH keys for GitHub user kisamoto for ansible user
      ansible.builtin.authorized_key:
        user: "{{ ansible_username }}"
        state: present
        key: "{{ item }}"
      with_items: "{{ ansible_ssh_keys }}"

- name: Harden SSH configuration
  hosts: all
  user: ansible
  become: yes
  tags:
    - setup
    - ssh
    - hardening

  roles:
    # This will disable the root user and password authentication
    - devsec.hardening.ssh_hardening

- name: Prepare and harden box
  hosts: all
  remote_user: ansible
  become: yes
  tags:
    - os
    - setup
    - hardening

  pre_tasks:
    - name: Update the packages cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

  roles:
    - geerlingguy.swap # add some swap space
    - devsec.hardening.os_hardening # lock down the OS
    - alvistack.podman # install podman

  vars:
    os_auditd_admin_space_left_action: rotate
    os_auditd_disk_full_action: rotate
    os_auditd_max_log_file_action: rotate
    os_ignore_users: ["ansible"]
    # Create a swap space to prevent the server from running out of memory
    swap_file_size_mb: "4096"

  tasks:
    - name: Upgrade all installed packages
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: yes
        autoremove: yes

    - name: Enable automatic security updates
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present

    - name: Configure automatic updates
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";

- name: Ensure webserver installed and watching directory
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - app
    - webserver

  vars:
    app_cloudflare_api_token: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      38346139306238623238373536313333363439336236316634343134306265656663303735363363
      6135666164653836323935653731386431323164653131310a636563613762373463663264333431
      37613136653532663137623038613534333063343962323464643839623039643234633362306138
      3235376165643237380a396336313137653261376239623562343863613338663934636331386663
      63303661623530393032393737613638393930656135636166653639346565346234303534346662
      6562366462366666623338343063336461633666333762643833

  roles:
    - role: caddy_ansible.caddy_ansible
      caddy_config: |
        import sites-enabled/*

      caddy_config_update: true
      caddy_update: true
      caddy_packages:
        - github.com/caddy-dns/cloudflare
        - github.com/mholt/caddy-ratelimit
      caddy_setcap: true
      caddy_systemd_capabilities_enabled: true
      caddy_systemd_capabilities: "CAP_NET_BIND_SERVICE"
      caddy_environment_variables:
        CF_API_TOKEN: "{{ app_cloudflare_api_token }}"

  tasks:
    - name: Create sites-enabled directory
      ansible.builtin.file:
        path: /etc/caddy/sites-enabled
        state: directory
        owner: www-data
        group: www-data
        mode: "0755"

    - name: Add caddy user to root group
      ansible.builtin.user:
        name: caddy
        groups:
          - root
        append: yes

    - name: Update Caddy service to run as root group
      ansible.builtin.lineinfile:
        path: /etc/systemd/system/caddy.service
        regexp: "^Group="
        line: "Group=root"
        state: present
      notify:
        - systemctl daemon-reload and caddy restart

  handlers:
    - name: systemctl daemon-reload and caddy restart
      ansible.builtin.systemd_service:
        daemon_reload: yes
        name: caddy
        state: restarted

- name: Deploy Agora Application
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - app
    - deploy
  vars:
    # app information
    app_name: agora
    app_user: agora
    app_group: www-data
    app_media_domain: media.agora.gdn
    app_static_domain: cdn.agora.gdn
    app_domains:
      - agora.gdn
      - www.agora.gdn
      - "{{ app_static_domain }}"
      # todo(kisamoto): add agorausermedia.com dns entries
      # - agorausermedia.com # Used for user uploaded media
    app_static_host: https://{{ app_static_domain }}/
    app_media_host: https://{{ app_media_domain }}/
    # management information
    lets_encrypt_email: ewan@agora.gdn
    # additional app configuration
    app_media_dir: /var/lib/{{ app_name }}/media
    app_django_secret_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      30316332666532343838333837643936333432623763333531303834303161306437656134343335
      6138623233613462353563636131313235303330633337360a323932373838616264656462303161
      62316537653335643532653263346638363165396263313531303464626366666165303331316561
      3034313737393863640a303535386466623735356164646532373638626261613263386231316239
      34663434373462376432656230333465623566373030646265363561633165636166373032346463
      37323365316536396337616237326631343365656262633633363261303762653761356163316165
      64316666383262363232643131646562353132623936313539376130613864323638366137313137
      62373366366236336362
    # where the app code is
    app_image_registry: docker.io
    app_image: "{{ app_image_registry}}/kisamoto/tmp.agora.net"
    app_image_registry_username: kisamoto
    # docker.io access token
    app_image_registry_password: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      61656439303330623434393332363734333361383063613234363436313865383865393438646465
      6661333533643938333936643364656437636431393238630a326461646565633633333635363866
      62356666643739326531666165646362393666346130323233353835323266353734633364306434
      3039633765663439660a386239613734353239666134666432663935306462623862343933323662
      37346337663534313332656538653265383233303138393230303237626263393134343733663236
      3761353066623633373838333634343336386637303566396631
    app_image_tag: latest

  tasks:
    - name: Set the group ID as a string
      ansible.builtin.set_fact:
        effective_group_id: "{{ ansible_facts['effective_group_id'] | string }}"

    - name: Set variable for runtime directory
      ansible.builtin.set_fact:
        runtime_dir: "{{ ansible_facts['env']['XDG_RUNTIME_DIR'] | default('/run/user/' + effective_group_id) }}/{{ app_name }}"

    - name: Create bind mount for gunicorn socket
      ansible.builtin.file:
        path: "{{ runtime_dir }}"
        state: directory
        group: "root"
        recurse: yes
        mode: "u=rwx,g=rwx,o=r"

    - name: Add podman volumes for sqlite database
      containers.podman.podman_volume:
        name: "{{ app_name }}_db"

    - name: Make sure media directory is owned and accessible by root group for caddy
      ansible.builtin.file:
        path: "{{ app_media_dir }}"
        state: directory
        owner: caddy
        group: "root"
        recurse: yes
        mode: "u=rwx,g=rwx,o=r"

    - name: Copy caddy config to directory being watched
      ansible.builtin.template:
        src: templates/caddy/Caddyfile.j2
        dest: /etc/caddy/sites-enabled/{{ app_name }}
        owner: www-data
        group: root
        mode: "0644"
        validate: caddy validate --adapter caddyfile --config %s
      notify: reload caddy

    - name: Add podman volumes for media directory at media directory location
      containers.podman.podman_volume:
        name: "{{ app_name }}_media"
        options:
          - device={{ app_media_dir }}
          - o=bind

    - name: Log in to docker hub for podman
      containers.podman.podman_login:
        username: "{{ app_image_registry_username }}"
        password: "{{ app_image_registry_password }}"
        registry: "{{ app_image_registry }}"

    - name: Pull app docker image for use with podman
      containers.podman.podman_image:
        name: "{{ app_image }}"
        tag: "{{ app_image_tag }}"
        force: "{{ app_image_tag == 'latest' }}"
      register: image_pull

    - name: Create podman secrets
      containers.podman.podman_secret:
        name: "{{ item.name }}"
        data: "{{ item.data }}"
      with_items:
        - name: DJANGO_SECRET_KEY
          data: "{{ app_django_secret_key }}"

    - name: Create podman container for application
      containers.podman.podman_container:
        name: "{{ app_name }}"
        generate_systemd:
          path: /etc/systemd/system
        group_add:
          - "{{ app_group }}"
          - root
        # todo(kisamoto): Setup health checks
        image: "{{ app_image }}:{{ app_image_tag }}"
        recreate: "{{ image_pull.changed }}"
        volumes:
          - "{{ app_name }}_db:/data/db"
          - "{{ app_name }}_media:/data/media"
          - "{{ runtime_dir }}:/run/gunicorn"
        env:
          DEBUG: "False"
          MEDIA_ROOT: "/data/media"
          MEDIA_HOST: "{{ app_media_host }}"
          DB_DEFAULT_URL: "sqlite:////data/db/db.sqlite3"
          ALLOWED_HOSTS: "{{ (app_domains) | join(',') }}"
          STATIC_HOST: "{{ app_static_host }}"
          LOG_LEVEL: WARNING
          EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
        secrets:
          - DJANGO_SECRET_KEY,type=env,target=SECRET_KEY
      notify: reload caddy

  handlers:
    - name: reload caddy
      ansible.builtin.systemd:
        name: caddy
        state: reloaded

- name: Add Backups for application
  hosts: app_servers
  remote_user: ansible
  become: yes
  tags:
    - backup

  vars:
    # app information
    app_name: agora
    # TODO(kisamoto): Add the Borg repo
    borg_repo: ssh://t12bjj3x@t12bjj3x.repo.borgbase.com/./repo
    borg_passphrase: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      65333461306537383863336563666339313435313164356538313564343136616264646537323464
      3234623934663636663431323231663063353439353633660a336534363666656162316466633833
      32373537653466643731303866346564616138656136633133323430353337663164343465636664
      6165383364633539320a343135393039626532323465666332646165613664363764346238393366
      37666138373136346536356666643834363565323131626666303632636634383330626166356661
      6165343235633961663635613766333861653333396134343231
    borg_private_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      61316633343962373864333966666434313765333663316662613837303265323336663735396361
      3432386637343263316364303833363538323165306531650a613165633864386232623831306635
      39613935333837333035393166663234326139303232376562313234643033636534613664313730
      3362623333363830650a383661393334323362313134306263623365396465626131636562316333
      62323031623036376664336539343837383336636261383062313735356166393935333566313239
      39393839353030383861346465666433663433316666386464633536363033333862643733343561
      38663232643734343339346531666630646131613930633163613834363435316164323932326336
      64356563366665343336623136363065656664383933386632386436316535623836303165336539
      37653033653365653837353337373361346663373033376265623565643763343865666434616630
      66643835646365623336626430383833623035613033363361336238363730653861356262613338
      30656338623564353065633936616335623233386335386239656138666664356432616637376537
      33653430333663616233323263363563616562616364316635646566336466306135633364646631
      37326230356461333736646233323033333434313836373564343434636263373639363730336665
      34343635306137326439633532316236643930353738653734366664326663363730313063383964
      61663032653836366230313035653739363333303232323131646364643663383732626562663736
      64323166383834393732643337373634633035363365396236633535316330633961373633396536
      35653266353135316134616332366637303832323832663863643539383966363833666166623835
      30353838623964373539643433316337653637363763616339346134636130386163633034373466
      62623932663433343166626238346539366164336335383266653736343266333831343466323765
      39396566353262326230313434633466666535653533306136336330616631656663643636613864
      39613861313433633539636534333533616538373566663633623638376661336335656135316636
      35643766656436333263663230313933333233373361393335643962633963653936646533323037
      33646337383763353938313239613362623735343366633238333131366239383738326536626531
      36386463373562306665623230366364663261363764303135343332366263336638333164633561
      31666662356462343963396535336637386664313234663335326637663863373838
    borg_ssh_key_directory: /root/.ssh
    borg_ssh_key_path: "{{ borg_ssh_key_directory }}/borg_{{ app_name }}_key"

  pre_tasks:
    - name: Update the packages cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

  tasks:
    - name: Get podman volume info for app sqlite database
      containers.podman.podman_volume_info:
        name: "{{ app_name }}_db"
      register: db_volume_info

    - name: Set volume mount location of app sqlite database
      ansible.builtin.set_fact:
        db_volume_mount: "{{ db_volume_info.volumes[0]['Mountpoint'] }}"

    - name: Get podman volume info for app media directory
      containers.podman.podman_volume_info:
        name: "{{ app_name }}_media"
      register: media_volume_info

    - name: Set volume mount location of app media directory
      ansible.builtin.set_fact:
        media_volume_mount: "{{ media_volume_info.volumes[0]['Mountpoint'] }}"

    - name: Create SSH directory for Borg
      ansible.builtin.file:
        path: "{{ borg_ssh_key_directory }}"
        state: directory
        owner: root
        group: root
        mode: "0700"

    - name: Copy Borg SSH key to server
      ansible.builtin.copy:
        content: "{{ borg_private_key }}"
        dest: "{{ borg_ssh_key_path }}"
        owner: root
        group: root
        mode: "0600"

    - name: Uninstall Borg and Borgmatic with apt
      ansible.builtin.package:
        name:
          - python3-msgpack
          - borgbackup
          - borgmatic
        state: absent

    - name: Install Borg by downloading standalone binary
      block:
        - name: Download Borg standalone binary
          ansible.builtin.get_url:
            url: https://github.com/borgbackup/borg/releases/download/1.4.0/borg-linux-glibc236
            dest: /usr/local/bin/borg
            group: root
            owner: root
            mode: "0755"

        - name: Download Borg standalone binary signature
          ansible.builtin.get_url:
            url: https://github.com/borgbackup/borg/releases/download/1.4.0/borg-linux-glibc236.asc
            dest: /usr/local/bin/borg.asc
            group: root
            owner: root

        - name: Import Borg standalone binary signature
          ansible.builtin.command:
            cmd: gpg --recv-keys 9F88FB52FAF7B393

        - name: Validate Borg standalone binary signature
          ansible.builtin.command:
            cmd: gpg --verify /usr/local/bin/borg.asc /usr/local/bin/borg

    - name: Install pipx
      ansible.builtin.apt:
        name: pipx
        state: present

    - name: Ensure pipx path
      ansible.builtin.command:
        cmd: pipx ensurepath

    - name: Install Borgmatic with pipx
      ansible.builtin.command:
        cmd: pipx install borgmatic

    - name: Create Borgmatic configuration directory
      ansible.builtin.file:
        path: /etc/borgmatic
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Create Borgmatic configuration file
      ansible.builtin.template:
        src: templates/borgmatic/config.yaml.j2
        dest: /etc/borgmatic/config.yaml
        owner: root
        group: root
        mode: "0644"
        validate: borgmatic config validate --config %s

    - name: Create Borgmatic systemd services
      ansible.builtin.template:
        src: templates/borgmatic/{{ item }}.j2
        dest: /etc/systemd/system/{{ item }}
        owner: root
        group: root
        mode: "0644"
        validate: systemd-analyze verify %s
      with_items:
        - borgmatic.timer
        - borgmatic.service

    - name: Initialize remote Borg repository
      ansible.builtin.command:
        cmd: borg init --encryption=repokey-blake2 {{ borg_repo }}

    - name: Enable and start Borgmatic services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - borgmatic.timer
        - borgmatic.service
